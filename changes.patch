diff --git a/ios/Inji.xcodeproj/project.pbxproj b/ios/Inji.xcodeproj/project.pbxproj
index 7ce458a7e..ed3d309f6 100644
--- a/ios/Inji.xcodeproj/project.pbxproj
+++ b/ios/Inji.xcodeproj/project.pbxproj
@@ -16,11 +16,11 @@
 		9C0E86B52BEE357A00E9F9F6 /* RNPixelpassModule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C0E86B42BEE357A00E9F9F6 /* RNPixelpassModule.swift */; };
 		9C0E86BB2BEE36C300E9F9F6 /* RNPixelpassModule.m in Sources */ = {isa = PBXBuildFile; fileRef = 9C0E86BA2BEE36C300E9F9F6 /* RNPixelpassModule.m */; };
 		9C9008082C3D04A20041AF07 /* ios-tuvali-library in Frameworks */ = {isa = PBXBuildFile; productRef = 9C9008072C3D04A20041AF07 /* ios-tuvali-library */; };
-		9CB598972C3BD800008BD9F8 /* RNEventMapper.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CB598922C3BD800008BD9F8 /* RNEventMapper.swift */; };
-		9CB598982C3BD800008BD9F8 /* RNWalletModule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CB598932C3BD800008BD9F8 /* RNWalletModule.swift */; };
-		9CB598992C3BD800008BD9F8 /* RNEventEmitterProtocol.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CB598942C3BD800008BD9F8 /* RNEventEmitterProtocol.swift */; };
-		9CB5989A2C3BD800008BD9F8 /* RNEventEmitter.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CB598952C3BD800008BD9F8 /* RNEventEmitter.swift */; };
-		9CB5989B2C3BD800008BD9F8 /* RNVersionModule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CB598962C3BD800008BD9F8 /* RNVersionModule.swift */; };
+		9C9008112C3D4E170041AF07 /* RNEventEmitter.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C90080C2C3D4E170041AF07 /* RNEventEmitter.swift */; };
+		9C9008122C3D4E170041AF07 /* RNEventEmitterProtocol.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C90080D2C3D4E170041AF07 /* RNEventEmitterProtocol.swift */; };
+		9C9008132C3D4E170041AF07 /* RNVersionModule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C90080E2C3D4E170041AF07 /* RNVersionModule.swift */; };
+		9C9008142C3D4E170041AF07 /* RNWalletModule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C90080F2C3D4E170041AF07 /* RNWalletModule.swift */; };
+		9C9008152C3D4E170041AF07 /* RNEventMapper.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C9008102C3D4E170041AF07 /* RNEventMapper.swift */; };
 		9CB5989D2C3BEAE4008BD9F8 /* RNWalletModule.m in Sources */ = {isa = PBXBuildFile; fileRef = 9CB5989C2C3BEAE4008BD9F8 /* RNWalletModule.m */; };
 		9CB637FD2C3BF0ED00B547F1 /* RNVersionModule.m in Sources */ = {isa = PBXBuildFile; fileRef = 9CB637FC2C3BF0ED00B547F1 /* RNVersionModule.m */; };
 		9CB638052C3BF60100B547F1 /* VCIClient in Frameworks */ = {isa = PBXBuildFile; productRef = 9CB638042C3BF60100B547F1 /* VCIClient */; };
@@ -64,11 +64,11 @@
 		7A4D352CD337FB3A3BF06240 /* Pods-Inji.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Inji.release.xcconfig"; path = "Target Support Files/Pods-Inji/Pods-Inji.release.xcconfig"; sourceTree = "<group>"; };
 		9C0E86B42BEE357A00E9F9F6 /* RNPixelpassModule.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RNPixelpassModule.swift; sourceTree = "<group>"; };
 		9C0E86BA2BEE36C300E9F9F6 /* RNPixelpassModule.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = RNPixelpassModule.m; sourceTree = "<group>"; };
-		9CB598922C3BD800008BD9F8 /* RNEventMapper.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventMapper.swift; path = "../../Downloads/tuvali-develop-4/ios/RNModules/RNEventMapper.swift"; sourceTree = "<group>"; };
-		9CB598932C3BD800008BD9F8 /* RNWalletModule.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNWalletModule.swift; path = "../../Downloads/tuvali-develop-4/ios/RNModules/RNWalletModule.swift"; sourceTree = "<group>"; };
-		9CB598942C3BD800008BD9F8 /* RNEventEmitterProtocol.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventEmitterProtocol.swift; path = "../../Downloads/tuvali-develop-4/ios/RNModules/RNEventEmitterProtocol.swift"; sourceTree = "<group>"; };
-		9CB598952C3BD800008BD9F8 /* RNEventEmitter.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventEmitter.swift; path = "../../Downloads/tuvali-develop-4/ios/RNModules/RNEventEmitter.swift"; sourceTree = "<group>"; };
-		9CB598962C3BD800008BD9F8 /* RNVersionModule.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNVersionModule.swift; path = "../../Downloads/tuvali-develop-4/ios/RNModules/RNVersionModule.swift"; sourceTree = "<group>"; };
+		9C90080C2C3D4E170041AF07 /* RNEventEmitter.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventEmitter.swift; path = Inji/RNEventEmitter.swift; sourceTree = "<group>"; };
+		9C90080D2C3D4E170041AF07 /* RNEventEmitterProtocol.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventEmitterProtocol.swift; path = Inji/RNEventEmitterProtocol.swift; sourceTree = "<group>"; };
+		9C90080E2C3D4E170041AF07 /* RNVersionModule.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNVersionModule.swift; path = Inji/RNVersionModule.swift; sourceTree = "<group>"; };
+		9C90080F2C3D4E170041AF07 /* RNWalletModule.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNWalletModule.swift; path = Inji/RNWalletModule.swift; sourceTree = "<group>"; };
+		9C9008102C3D4E170041AF07 /* RNEventMapper.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = RNEventMapper.swift; path = Inji/RNEventMapper.swift; sourceTree = "<group>"; };
 		9CB5989C2C3BEAE4008BD9F8 /* RNWalletModule.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; name = RNWalletModule.m; path = Inji/RNWalletModule.m; sourceTree = "<group>"; };
 		9CB637FC2C3BF0ED00B547F1 /* RNVersionModule.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; name = RNVersionModule.m; path = Inji/RNVersionModule.m; sourceTree = "<group>"; };
 		AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.storyboard; name = SplashScreen.storyboard; path = Inji/SplashScreen.storyboard; sourceTree = "<group>"; };
@@ -123,14 +123,14 @@
 				13B07FAF1A68108700A75B9A /* AppDelegate.h */,
 				13B07FB01A68108700A75B9A /* AppDelegate.mm */,
 				9C0E86B42BEE357A00E9F9F6 /* RNPixelpassModule.swift */,
-				9CB598952C3BD800008BD9F8 /* RNEventEmitter.swift */,
-				9CB598942C3BD800008BD9F8 /* RNEventEmitterProtocol.swift */,
-				9CB598922C3BD800008BD9F8 /* RNEventMapper.swift */,
-				9CB598962C3BD800008BD9F8 /* RNVersionModule.swift */,
 				9CB637FC2C3BF0ED00B547F1 /* RNVersionModule.m */,
-				9CB598932C3BD800008BD9F8 /* RNWalletModule.swift */,
 				9CB5989C2C3BEAE4008BD9F8 /* RNWalletModule.m */,
 				9C0E86BA2BEE36C300E9F9F6 /* RNPixelpassModule.m */,
+				9C90080C2C3D4E170041AF07 /* RNEventEmitter.swift */,
+				9C90080D2C3D4E170041AF07 /* RNEventEmitterProtocol.swift */,
+				9C9008102C3D4E170041AF07 /* RNEventMapper.swift */,
+				9C90080E2C3D4E170041AF07 /* RNVersionModule.swift */,
+				9C90080F2C3D4E170041AF07 /* RNWalletModule.swift */,
 				13B07FB51A68108700A75B9A /* Images.xcassets */,
 				13B07FB61A68108700A75B9A /* Info.plist */,
 				13B07FB71A68108700A75B9A /* main.m */,
@@ -478,20 +478,20 @@
 			isa = PBXSourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				9CB5989B2C3BD800008BD9F8 /* RNVersionModule.swift in Sources */,
-				9CB598982C3BD800008BD9F8 /* RNWalletModule.swift in Sources */,
-				9CB598992C3BD800008BD9F8 /* RNEventEmitterProtocol.swift in Sources */,
+				9C9008132C3D4E170041AF07 /* RNVersionModule.swift in Sources */,
 				13B07FBC1A68108700A75B9A /* AppDelegate.mm in Sources */,
 				9C0E86BB2BEE36C300E9F9F6 /* RNPixelpassModule.m in Sources */,
 				E86208152C0335C5007C3E24 /* RNVCIClientModule.swift in Sources */,
 				9CB5989D2C3BEAE4008BD9F8 /* RNWalletModule.m in Sources */,
 				9C0E86B52BEE357A00E9F9F6 /* RNPixelpassModule.swift in Sources */,
+				9C9008122C3D4E170041AF07 /* RNEventEmitterProtocol.swift in Sources */,
 				13B07FC11A68108700A75B9A /* main.m in Sources */,
-				9CB5989A2C3BD800008BD9F8 /* RNEventEmitter.swift in Sources */,
+				9C9008112C3D4E170041AF07 /* RNEventEmitter.swift in Sources */,
 				E86208172C0335EC007C3E24 /* RNVCIClientModule.m in Sources */,
+				9C9008152C3D4E170041AF07 /* RNEventMapper.swift in Sources */,
 				B18059E884C0ABDD17F3DC3D /* ExpoModulesProvider.swift in Sources */,
-				9CB598972C3BD800008BD9F8 /* RNEventMapper.swift in Sources */,
 				9CB637FD2C3BF0ED00B547F1 /* RNVersionModule.m in Sources */,
+				9C9008142C3D4E170041AF07 /* RNWalletModule.swift in Sources */,
 				73295844242A4AD3AA52D0BE /* noop-file.swift in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -506,11 +506,10 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_MODULES = YES;
 				CODE_SIGN_ENTITLEMENTS = Inji/Inji.entitlements;
-				CODE_SIGN_IDENTITY = "Apple Distribution";
+				CODE_SIGN_IDENTITY = "Apple Development";
 				CODE_SIGN_STYLE = Automatic;
 				CURRENT_PROJECT_VERSION = 8;
 				DEVELOPMENT_TEAM = V2ABX7953Z;
-				"DEVELOPMENT_TEAM[sdk=iphoneos*]" = V2ABX7953Z;
 				ENABLE_BITCODE = NO;
 				"EXCLUDED_ARCHS[sdk=iphonesimulator*]" = arm64;
 				GCC_PREPROCESSOR_DEFINITIONS = (
@@ -533,7 +532,6 @@
 				PRODUCT_BUNDLE_IDENTIFIER = io.mosip.inji.wallet.mobileid;
 				PRODUCT_NAME = Inji;
 				PROVISIONING_PROFILE_SPECIFIER = "";
-				"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]" = "";
 				SWIFT_OBJC_BRIDGING_HEADER = "";
 				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
 				SWIFT_VERSION = 5.0;
diff --git a/ios/Inji.xcworkspace/xcshareddata/swiftpm/Package.resolved b/ios/Inji.xcworkspace/xcshareddata/swiftpm/Package.resolved
index 1e6d0aaca..028a31c30 100644
--- a/ios/Inji.xcworkspace/xcshareddata/swiftpm/Package.resolved
+++ b/ios/Inji.xcworkspace/xcshareddata/swiftpm/Package.resolved
@@ -45,7 +45,16 @@
         "branch" : "develop",
         "revision" : "0b716d5f6545b10de84c69edbf59565e66776ccd"
       }
+    },
+    {
+      "identity" : "tuvali-ios-swift",
+      "kind" : "remoteSourceControl",
+      "location" : "https://github.com/mosip/tuvali-ios-swift/",
+      "state" : {
+        "branch" : "develop",
+        "revision" : "96bc662cd07df051cf2357691469bba57b0217e8"
+      }
     }
   ],
-  "version" : 2
-}
\ No newline at end of file
+  "version" : 3
+}
diff --git a/ios/Inji/RNEventEmitter.swift b/ios/Inji/RNEventEmitter.swift
new file mode 100644
index 000000000..9a4c38401
--- /dev/null
+++ b/ios/Inji/RNEventEmitter.swift
@@ -0,0 +1,27 @@
+import Foundation
+
+class RNEventEmitter: RNEventEmitterProtocol {
+    public static var sharedInstance = RNEventEmitter()
+    private var EVENT_NAME = "DATA_EVENT"
+    static var producer: WalletModule!
+    
+    private  init() {}
+    
+    func emitEvent(eventMap: NSMutableDictionary) {
+        dispatch(name: EVENT_NAME, body: eventMap)
+    }
+    
+     func registerEventEmitter(producer: WalletModule) {
+        RNEventEmitter.producer = producer
+    }
+    
+    fileprivate func dispatch(name: String, body: Any?) {
+        RNEventEmitter.producer.sendEvent(withName: name, body: body)
+    }
+    
+    lazy var allEvents: [String] = {
+        return [
+            EVENT_NAME
+        ]
+    }()
+}
diff --git a/ios/Inji/RNEventEmitterProtocol.swift b/ios/Inji/RNEventEmitterProtocol.swift
new file mode 100644
index 000000000..e37b11b97
--- /dev/null
+++ b/ios/Inji/RNEventEmitterProtocol.swift
@@ -0,0 +1,5 @@
+import Foundation
+
+protocol RNEventEmitterProtocol {
+    func emitEvent(eventMap: NSMutableDictionary)
+}
diff --git a/ios/Inji/RNEventMapper.swift b/ios/Inji/RNEventMapper.swift
new file mode 100644
index 000000000..650d1caed
--- /dev/null
+++ b/ios/Inji/RNEventMapper.swift
@@ -0,0 +1,47 @@
+import Foundation
+import ios_tuvali_library
+import os.log
+
+class RNEventMapper {
+    
+    static func toMap(_ event: Event) -> NSMutableDictionary {
+        let writableMap = NSMutableDictionary()
+        
+        writableMap["type"] = getEventType(event)
+        populateWithArgs(event, writableMap)
+        
+        return writableMap
+    }
+    
+    fileprivate static func getEventType(_ event: Event) -> String {
+        switch event {
+        case is ConnectedEvent: return "onConnected"
+        case is SecureChannelEstablishedEvent: return "onSecureChannelEstablished"
+        case is DataSentEvent: return "onDataSent"
+        case is VerificationStatusEvent: return "onVerificationStatusReceived"
+        case is ErrorEvent: return  "onError"
+        case is DisconnectedEvent: return "onDisconnected"
+        default:
+            os_log(.error, "Invalid event type")
+            return ""
+        }
+    }
+    
+    fileprivate static func populateWithArgs(_ event: Event, _ writableMap: NSMutableDictionary) {
+        let eventMirror = Mirror(reflecting: event)
+        
+        for child in eventMirror.children {
+            var value = child.value
+            
+            if(child.label != nil && (value is String || value is Int)) {
+                writableMap[child.label!] = value
+                continue
+            }
+        }
+        
+        //TODO: Find a way to convert enum to arg in a generic way
+        if let event = event as? VerificationStatusEvent {
+            writableMap["status"] = event.status.rawValue
+        }
+    }
+}
diff --git a/ios/Inji/RNVersionModule.swift b/ios/Inji/RNVersionModule.swift
new file mode 100644
index 000000000..b3355b4b8
--- /dev/null
+++ b/ios/Inji/RNVersionModule.swift
@@ -0,0 +1,34 @@
+import Foundation
+import React
+import os.log
+
+
+@objc(VersionModule)
+class VersionModule: RCTEventEmitter {
+    private var tuvaliVersion: String = "unknown"
+    
+    @objc
+    func setTuvaliVersion(_ version: String, resolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock) {
+        do {
+            tuvaliVersion = version
+            os_log("Tuvali version - %{public}@", tuvaliVersion)
+            resolver(tuvaliVersion)
+        } catch let error {
+            rejecter("SET_VERSION_ERROR", "Failed to set Tuvali version", error)
+        }
+    }
+    
+    @objc
+    override func supportedEvents() -> [String]! {
+        return []
+    }
+    
+    override static func requiresMainQueueSetup() -> Bool {
+        return true
+    }
+
+    @objc
+  override static func moduleName() -> String {
+        return "VersionModule"
+    }
+}
diff --git a/ios/Inji/RNWalletModule.swift b/ios/Inji/RNWalletModule.swift
new file mode 100644
index 000000000..4d288fd54
--- /dev/null
+++ b/ios/Inji/RNWalletModule.swift
@@ -0,0 +1,65 @@
+import Foundation
+import React
+import ios_tuvali_library
+
+@objc(WalletModule)
+class WalletModule: RCTEventEmitter {
+    var wallet: WalletProtocol = Wallet()
+    var tuvaliVersion: String = "unknown"
+
+    override init() {
+        super.init()
+        RNEventEmitter.sharedInstance.registerEventEmitter(producer: self)
+        wallet.subscribe { event in
+          RNEventEmitter.sharedInstance.emitEvent(eventMap: RNEventMapper.toMap(event))
+        }
+    }
+
+    @objc func noop() {
+        // No operation method
+    }
+
+    @objc
+    func startConnection(_ uri: String, resolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock) {
+        do {
+            wallet.startConnection(uri)
+            resolver(nil)
+        } catch let error {
+            rejecter("START_CONNECTION_ERROR", "Failed to start connection", error)
+        }
+    }
+
+    @objc
+    func disconnect(_ resolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock) {
+        do {
+            wallet.disconnect()
+            resolver(nil)
+        } catch let error {
+            rejecter("DISCONNECT_ERROR", "Failed to disconnect", error)
+        }
+    }
+
+    @objc
+    func sendData(_ payload: String, resolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock) {
+        do {
+            wallet.send(payload)
+            resolver(nil)
+        } catch let error {
+            rejecter("SEND_DATA_ERROR", "Failed to send data", error)
+        }
+    }
+  
+  @objc override func supportedEvents() -> [String]! {
+      return RNEventEmitter.sharedInstance.allEvents
+  }
+
+
+    override static func requiresMainQueueSetup() -> Bool {
+        return false
+    }
+
+  @objc
+  override static func moduleName() -> String {
+        return "WalletModule"
+    }
+}
diff --git a/tuvali/index.tsx b/tuvali/index.tsx
index 0071f74d1..8d6e23209 100644
--- a/tuvali/index.tsx
+++ b/tuvali/index.tsx
@@ -1,7 +1,7 @@
 import {NativeEventEmitter, NativeModules, Platform} from 'react-native';
 import type {Verifier, VersionModule, Wallet} from './types/interface';
 import {EventTypes, VerificationStatus} from './types/events';
-import {isIOS} from '../shared/constants';
+import {isAndroid, isIOS} from '../shared/constants';
 import {tuvaliVersion} from './tuvaliVersion';
 
 const LINKING_ERROR =
@@ -71,7 +71,7 @@ setupModule(wallet);
 // });
 
 function setupModule(module: any) {
-  if (Platform.OS === 'android') {
+  if (isAndroid()) {
     const eventEmitter = new NativeEventEmitter();
     module.handleDataEvents = (callback: (event: any) => void) =>
       eventEmitter.addListener('DATA_EVENT', callback);
